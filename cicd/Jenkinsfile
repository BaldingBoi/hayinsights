pipeline {
    agent any
    environment {
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
    }
    stages {
        // stage('load env') {
        //     steps {
        //         script {
        //             try {
        //                 if (params.WORKSPACE=="develop") {
        //                     sh '''
        //                         sudo cp ./env/${WORKSPACE}.${IMAGES}.env ./.env
        //                         ls -lah
        //                     '''
        //                 }
        //                 if (params.WORKSPACE=="products") {
        //                     sh '''

        //                         cp /var/lib/jenkins/workspace/update-env-for-service-vnsc/vnsc-accounts/ext_phones.json ./src/ext_phones.json                         
        //                     '''
        //                     echo "do nothing!"
                            
        //                 }
        //             }
        //             catch (err) {
        //                 currentBuild.result = "FAILED"
        //                 throw err
        //             }
        //         }
        //     }
	    // }
        stage('Build and upload image') {
            steps {
                script {
                    try {
                        sh 'bash ./cicd/build_image.sh $WORKSPACE ${WORKSPACE}-${IMAGES}  $BUILD_NUMBER ${URL_PRIVATE_REGISTRY}'
                        sh 'sudo docker images "${URL_PRIVATE_REGISTRY}/${WORKSPACE}-${IMAGES}" --digests'
                    }
                    catch (err) {
                        currentBuild.result = "FAILED"
                        throw err
                    }
                }
            }
	    }

        stage('Promote to K8s') {
            steps {
                script {
                    try {
                        sh 'bash ./cicd/update_image_to_service_on_k8s.sh $WORKSPACE ${WORKSPACE}-${IMAGES}  $BUILD_NUMBER ${URL_PRIVATE_REGISTRY}'
                        sh 'git checkout .'
                    }
                    catch (err) {
                        currentBuild.result = "FAILED"
                        throw err
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()

                echo "GIT_COMMIT_MSG: ${GIT_COMMIT_MSG}"
                if (currentBuild.result == 'SUCCESS') {
                    sh "bash ./cicd/send-noti-to-ggchat.sh '<users/all> *${params.WORKSPACE}* buid *${WORKSPACE}-${IMAGES}:$BUILD_NUMBER* *SUCCESSFULL* üëç. '"
                } else {
                    sh "bash ./cicd/send-noti-to-ggchat.sh '<users/all> *${params.WORKSPACE}* buid *${WORKSPACE}-${IMAGES}:$BUILD_NUMBER* *FAILD* üëé. '"   
                }
            }
        }
        // success {
        //     echo 'I succeeded!'
        // }
        // unstable {
        //     echo 'I am unstable :/'
        // }
        // failure {
        //     echo 'I failed :('
        // }
        // changed {
        //     echo 'Things were different before...'
        // }
    }
}
